Q Link: https://leetcode.com/problems/unique-paths-ii/description/?envType=study-plan-v2&id=dynamic-programming

class Solution {
public:
    long long mod = 1e9+7;
    int solve(vector<vector<int>> &o, vector<vector<int>> &dp, int i, int j){
        if(i >= 0 && j >= 0 && o[i][j] == 1){
            return 0;
        }
        if(i == 0 && j == 0){
            return 1;
        }
        if(i< 0 || j < 0){
            return 0;
        }
        if(dp[i][j] != -1){
            return dp[i][j];
        }
        int up = solve(o, dp, i-1, j);
        int left = solve(o, dp , i, j-1);
        return dp[i][j] = (up + left);

    }



    int uniquePathsWithObstacles(vector<vector<int>>& o) {
        int m = o.size(), n = o[0].size(); 
        vector<vector<int>> dp(m, vector<int> (n, -1));
        return max(solve(o, dp, m-1, n-1), 0);
    }
};
